{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "ae490322-6601-4aa4-b855-919b92603238": {
        "id": "ae490322-6601-4aa4-b855-919b92603238",
        "parent": null,
        "name": "foo",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "3d06a450-b685-47e8-8af4-c25e79eb392f"
        ],
        "isRemovable": false,
        "filePath": "foo"
      },
      "3d06a450-b685-47e8-8af4-c25e79eb392f": {
        "id": "3d06a450-b685-47e8-8af4-c25e79eb392f",
        "parent": "ae490322-6601-4aa4-b855-919b92603238",
        "name": "lambda.js",
        "type": "LAMBDA_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "foo/lambda.js",
        "code": "let AWS = require('aws-sdk');\nlet SL = require('@slappforge/slappforge-sdk');\n\nconst sqs = new SL.AWS.SQS(AWS);\nconst sns = new AWS.SNS();\nconst kinesis = new AWS.Kinesis();\nconst ddb = new AWS.DynamoDB.DocumentClient();\n\nexports.handler = function (event, context, callback) {\n\tddb.get({\n\t\tTableName: 'test',\n\t\tKey: { 'a': 'ba' }\n\t}, function (err, data) {\n\t\tif (err) {\n\t\t\t//handle error\n\t\t} else {\n\t\t\t//your logic goes here\n\t\t}\n\t});\n\tkinesis.describeStream({\n\t\tStreamName: 'kin'\n\t}).promise()\n\t\t.then(data => {\n\t\t\t// your logic goes here\n\t\t})\n\t\t.catch(err => {\n\t\t\t// error handling goes here\n\t\t});\n\tcallback(null, 'Successfully executed');\n\tsns.publish({\n\t\tMessage: 'tx',\n\t\tSubject: 'msg',\n\t\tMessageAttributes: {},\n\t\tMessageStructure: 'String',\n\t\tTopicArn: 'arn:aws:sns:eu-central-1:359675929438:sns'\n\t}).promise()\n\t\t.then(data => {\n\t\t\t// your code goes here\n\t\t})\n\t\t.catch(err => {\n\t\t\t// error handling goes here\n\t\t});\n\tsqs.receiveMessage({\n\t\tQueueUrl: 'https://sqs.eu-central-1.amazonaws.com/359675929438/sqs',\n\t\tAttributeNames: ['All'],\n\t\tMaxNumberOfMessages: '1',\n\t\tVisibilityTimeout: '30',\n\t\tWaitTimeSeconds: '0'\n\t}, function (receivedMessages) {\n\t\treceivedMessages.forEach(message => {\n\t\t\t// your logic to access each message through out the loop. Each message is available under variable message \n\t\t\t// within this block\n\t\t})\n\t}, function (error) {\n\t\t// implement error handling logic here\n\t});\n}",
        "triggers": [
          {
            "resourceName": "s3apigKineProxy",
            "config": {
              "type": "s3:ObjectCreated:*",
              "keyPrefix": "",
              "keySuffix": ""
            }
          },
          {
            "resourceName": "apigeuCentral1apipathget",
            "config": {}
          },
          {
            "resourceName": "cwesched",
            "config": {}
          }
        ],
        "version": 1
      }
    },
    "rootNode": "ae490322-6601-4aa4-b855-919b92603238",
    "openFiles": [
      "3d06a450-b685-47e8-8af4-c25e79eb392f"
    ],
    "currentFileId": "3d06a450-b685-47e8-8af4-c25e79eb392f",
    "resources": {
      "s3apigKineProxy": {
        "name": "s3apigKineProxy",
        "type": "S3",
        "config": {
          "mode": 1,
          "bucket": {
            "region": "eu-central-1",
            "name": "apig-kine-proxy"
          }
        },
        "globallyEditable": false
      },
      "cwesched": {
        "name": "cwesched",
        "type": "CLOUD_WATCH",
        "config": {
          "mode": 0,
          "name": "sched",
          "description": "",
          "scheduleExpression": "rate(4 minutes)"
        },
        "globallyEditable": true
      },
      "apigeuCentral1apipathget": {
        "name": "apigeuCentral1apipathget",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "eu-central-1",
          "apiMode": 0,
          "apiName": "api",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "path",
          "resourcePath": "/path",
          "restMethod": "GET",
          "proxyIntegration": false,
          "enableCORS": true,
          "stageMode": 0,
          "stageName": "prod"
        },
        "globallyEditable": true
      },
      "ddbtest": {
        "name": "ddbtest",
        "type": "DynamoDB",
        "config": {
          "mode": 0,
          "operation": "get",
          "table": {
            "arn": "",
            "name": "test",
            "partitionKey": "a",
            "partitionKeyType": "S",
            "hasSortKey": false,
            "sortKey": "",
            "sortKeyType": "S",
            "mode": 0
          },
          "isGlobalEditMode": false,
          "parameters": {
            "Key": {
              "a": "ba"
            },
            "Item": {},
            "ExpressionAttributeValues": {}
          },
          "validator": {
            "validatableFields": {},
            "validity": true
          },
          "valid": true
        },
        "globallyEditable": false
      },
      "kinesiskin": {
        "name": "kinesiskin",
        "type": "Kinesis",
        "config": {
          "mode": 0,
          "StreamName": "kin",
          "shards": 1,
          "region": "eu-central-1",
          "operation": "describe-stream"
        },
        "globallyEditable": true
      },
      "snseuCentral1sns": {
        "name": "snseuCentral1sns",
        "type": "SNS",
        "config": {
          "topicMode": 0,
          "topicName": "sns",
          "topicArn": "arn:aws:sns:eu-central-1:359675929438:sns",
          "topicRegion": "eu-central-1",
          "snsType": 0,
          "topicDisplayName": "sns",
          "subscriptions": []
        },
        "globallyEditable": true
      },
      "sqseuCentral1sqs": {
        "name": "sqseuCentral1sqs",
        "type": "SQS",
        "config": {
          "mode": 0,
          "existing": false,
          "name": "sqs",
          "url": "https://sqs.eu-central-1.amazonaws.com/359675929438/sqs",
          "selectedRegion": "eu-central-1",
          "deliveryDelay": 0,
          "deliveryDelayUnit": "seconds",
          "useRedrivePolicy": false,
          "useSSE": false,
          "kmsCustomerMasterKey": "default",
          "accountId": "359675929438",
          "dataKeyReusePeriod": 5,
          "queueType": "standardQueue",
          "defaultVisibilityTimeout": 30,
          "defaultVisibilityTimeoutUnit": "seconds",
          "messageRetentionPeriod": 4,
          "messageRetentionPeriodUnit": "days",
          "maximumMessageSize": 256,
          "receiveMessageWaitTime": 0,
          "deadLetterQueueName": "",
          "contentBasedDeduplication": false,
          "operation": 0
        },
        "globallyEditable": true
      }
    },
    "packageJSON": {
      "dependencies": {
        "aws-sdk": {
          "name": "aws-sdk",
          "version": "2.176.0",
          "notRemovable": true
        },
        "slappforge-sdk": {
          "name": "@slappforge/slappforge-sdk",
          "version": "0.0.3",
          "notRemovable": true,
          "types": "\n                    declare class RDSQueryParams {\n    instanceIdentifier: string;\n    query: string;\n    inserts: Array<any>\n}\n\ndeclare namespace SL.AWS {\n    class RDS {\n        query(params: RDSQueryParams, callback: Function, connection: any): void;\n\n        beginTransaction(params: any, callback: Function): void;\n    }\n\n    class SQS {\n        receiveAndDeleteMessages(params: any, filteringCallBack: Function, deleteCallBack: Function, errorCallBack: Function): void;\n    }\n}\n"
        },
        "SL": "1.0.0"
      }
    },
    "lambdaId": "3d06a450-b685-47e8-8af4-c25e79eb392f",
    "additionalFiles": []
  },
  "PROJECT_META": {
    "projectName": "foo",
    "projectDescription": "",
    "projectVersion": "1.0.1",
    "projectRegion": "us-east-1",
    "repoName": "foo",
    "repoUrl": "https://github.com/sigmaidetest/foo",
    "lastSave": 1517984109057
  }
}